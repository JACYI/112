********************************************************************************************************************
#include "audio.h"
#include <SoftwareSerial.h>

#include <Adafruit_NeoPixel.h>

#include <Servo.h>
#define val_max 4
#define val_min 1
#define INTERVAL_Time 10

#define humanHotSensor 4//PIR传感器D4
#define buttonPin 12
#define PIN 6//彩灯
#define SERVOPIN SDA//舵机

Adafruit_NeoPixel strip = Adafruit_NeoPixel(2, PIN, NEO_GRB + NEO_KHZ800);

Servo myservo;
bool isUP = true;

//unsigned long lcd_time = millis(); //刷新时间计时器
int val = 0;
int music_vol = 26; //初始音量0~30
bool humanHotState = true;
boolean on_off;
boolean statusChange;
bool playing = true;

int pos = 0;
int soundNum = 1;

unsigned long Time_millis = millis();


void setup() {
  Serial.begin(9600);
  pinMode(buttonPin, INPUT);
  pinMode(humanHotSensor, INPUT);
  audio_init(DEVICE_Flash,4,music_vol);    //初始化mp3模块
  //audio_init(DEVICE_TF, MODE_loopOne, music_vol);

  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
  myservo.attach(SERVOPIN);
}

void loop() {
  humanHotState = digitalRead(humanHotSensor);
  // print out the state of the button:
  //Serial.println(humanHotState);
  //delay(1);        // delay in between reads for stability

  if (humanHotState) {
    colorWipe(strip.Color(125, 125, 125));
    updateServo();

    if (!playing) {
      Serial.println("play sound.....");
      audio_play();
     audio_choose(1);
      playing = true;
    }
  }
  else
  {
    playing = true;
    audio_play();
    Serial.println("play sound.....");
    colorWipe(strip.Color(0, 0, 0));
    myservo.write(90);
  }
}

void updateServo() {
  if (Time_millis > millis()) Time_millis = millis();
  if (millis() - Time_millis > INTERVAL_Time) {

    if (pos == 30) {
      isUP = true;
    } else if (pos == 130) {
      isUP = false;
    }

    if (isUP) {
      pos++;
    } else {
      pos--;
    }
    //Serial.println(pos);
    myservo.write(pos);
    Time_millis = millis();
  }
}

// Fill the dots one after the other with a color
void colorWipe(uint32_t c) {
  for (uint16_t i = 0; i < strip.numPixels(); i++) {
    strip.setPixelColor(i, c);
    strip.show();
    //delay(wait);
  }
}
#define INTERVAL_SENSOR   17000             //定义传感器采样时间间隔  597000 #define INTERVAL_NET      17000             //定义发送时间 //传感器部分================================ #include <Wire.h>                                  //调用库 #include "./ESP8266.h" #include "I2Cdev.h"                                //调用库 //温湿度 #include "./SHT2x.h" //光照 #define  sensorPin_1  A0
#define SSID           "ykyk"                   // cannot be longer than 32 characters! #define PASSWORD       "10305410" #define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data               // received before closing the connection.  If you know the server                                    // you're accessing is quick to respond, you can reduce this value. //WEBSITE     #define HOST_NAME   "api.heclouds.com" #define DEVICEID   "20462245" #define PROJECTID "106677" #define HOST_PORT   (80) String apiKey=" 0qBdRVnJkXe850sIM8rhGUUNwZg= "; char buf[10]; #define INTERVAL_sensor 2000 unsigned long sensorlastTime = millis(); float tempOLED, humiOLED, lightnessOLED; #define INTERVAL_OLED 1000 String mCottenData; String jsonToSend; //3,传感器值的设置 float sensor_tem, sensor_hum, sensor_lux;                    //传感器温度、湿度、光照 char  sensor_tem_c[7], sensor_hum_c[7], sensor_lux_c[7] ;    //换成char数组传输 #include <SoftwareSerial.h> SoftwareSerial mySerial(2, 3); /* RX:D3, TX:D2 */ ESP8266 wifi(mySerial); //ESP8266 wifi(Serial1);                                      //定义一个ESP8266（wifi）的对象 unsigned long net_time1 = millis();                          //数据上传服务器时间 unsigned long sensor_time = millis();                        //传感器采样时间计时器 //int SensorData;                                   //用于存储传感器数据 String postString;                                //用于存储发送数据的字符串 //String jsonToSend;                                //用于存储发送的json格式参数 #include <Rtc_Pcf8563.h> Rtc_Pcf8563 rtc; #define music_num_MAX 2 //最多存放2首歌曲 #include <SoftwareSerial.h> //用户自定义部分----------------- #include <Wire.h> //EEPROM--------------------- #include <EEPROM.h> #define EEPROM_write(address, p) {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) EEPROM.write(address+i, pp[i]);} #define EEPROM_read(address, p)  {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) pp[i]=EEPROM.read(address+i);} struct config_type { int EEPROM_music_num;       //歌曲的数目 int EEPROM_music_vol;       //歌曲的音量 }; //用户自定义部分------------------------ //#include "audio.h"   //"audio.h"是控制音频文件 #include "U8glib.h" //-------字体设置，大、中、小 #define setFont_L u8g.setFont(u8g_font_7x13) #define setFont_M u8g.setFont(u8g_font_fixed_v0r) #define setFont_S u8g.setFont(u8g_font_fixed_v0r) /* font: u8g_font_7x13 u8g_font_fixed_v0r u8g_font_chikitar u8g_font_osb21 u8g_font_courB14r u8g_font_courB24n u8g_font_9x18Br */ //#include "arduino.h" //#include <SoftwareSerial.h> //SoftwareSerial mySerial(-1, 3); // RX, TX #define AUDIO_PORT mySerial    //Core+ //#define AUDIO_PORT mySerial  //Core //芯片复位 byte sn_reset[4] = { 0x7E, 0x02, 0x0C, 0xEF }; //指定曲目 byte sn_choose[6] = { 0x7E, 0x04, 0x03, 0x00, 0x01, 0xEF }; //指定音量 byte sn_vol[5] = { 0x7E, 0x03, 0x06, 0x18, 0xEF }; //指定设备 byte sn_device[5] = { 0x7E, 0x03, 0x09, 0x01, 0xEF }; //暂停 byte sn_pause[4] = { 0x7E, 0x02, 0x0E, 0xEF }; //播放 byte sn_play[4] = { 0x7E, 0x02, 0x0D, 0xEF }; //循环播放 byte sn_mode[5] = { 0x7E, 0x03, 0x11, 0x00, 0xEF }; //下一曲 byte sn_down[4] = { 0x7E, 0x02, 0x01, 0xEF }; //上一曲 byte sn_up[4] = { 0x7E, 0x02, 0x02, 0xEF }; //指定EQ（播放风格） byte sn_eq[5] = { 0x7E, 0x03, 0x07, 0x01, 0xEF }; //----------------------------- void audio_pause()//暂停 { AUDIO_PORT.write(sn_pause, 4); delay(50); } void audio_play()//播放 { AUDIO_PORT.write(sn_play, 4); delay(50); } //play eq    (Normal/Pop/Rock/Jazz/Classic/Base)  0-5 void audio_eq(byte _audio_eq)//指定音频播放风格 { sn_mode[3] = _audio_eq; AUDIO_PORT.write(sn_eq, 5); delay(100); } #define MODE_loopAll 0 #define MODE_loopOne 1 #define MODE_One_END 2 #define MODE_One_STOP  4 //play mode    (ALL/FOL/ONE/RAM/ONE_STOP)  0-4 void audio_mode(byte _audio_mode)//指定循环方式 { sn_mode[3] = _audio_mode; while (digitalRead(2)) AUDIO_PORT.write(sn_mode, 5); delay(100); } #define DEVICE_Flash  5 #define DEVICE_TF  1 //device select    (U/TF/AUX/SLEEP/FLASH)  0-4 void audio_device(byte _audio_device)//指定设备 { sn_device[3] = _audio_device; while (digitalRead(2)) AUDIO_PORT.write(sn_device, 5); delay(1500); } void audio_down()//下一曲 { AUDIO_PORT.write(sn_down, 4); delay(500); } void audio_up()//上一曲 { AUDIO_PORT.write(sn_up, 4); delay(500); } void audio_vol(byte _audio_vol)//指定音量 { sn_vol[3] = _audio_vol; AUDIO_PORT.write(sn_vol, 5); delay(50); } void audio_choose(byte _audio_choose)//指定曲目 { sn_choose[4] = _audio_choose; AUDIO_PORT.write(sn_choose, 6); delay(200); } void audio_reset()//芯片复位 { while (digitalRead(2)) AUDIO_PORT.write(sn_reset, 4); delay(1000); } void audio_init(int _audio_init_device, int _audio_init_mode, int _audio_init_vol)//指定相应的设备（_audio_init_device） 相应循环方式（_audio_init_mode）相应音量 { AUDIO_PORT.begin(9600); delay(1000); audio_reset(); audio_device(_audio_init_device); audio_mode(_audio_init_mode); audio_vol(_audio_init_vol); audio_choose(1); audio_pause(); } //屏幕类型-------- U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE); #define init_draw 500  //主界面刷新时间 unsigned long timer_draw; int MENU_FONT = 1;  //初始化字体大小 0：小，1：中，2：大 boolean music_status = false; //歌曲播放状态 int music_num = 1;    //歌曲序号 int music_vol = 30;             //音量0~30 String dateStr, ret; boolean key, key_cache;         //定义mp3的开关 unsigned long music_vol_time_cache = 0; unsigned long music_vol_time = 0; boolean music_vol_sta = false; int uiStep()         //切歌 { if (analogRead(A0) < 100)  //Y-up { delay(50);       //延迟50毫秒输出 if (analogRead(A0) < 100)      // return 1;      //回到动作1 } if (analogRead(A1) < 100)    // { delay(50);       //延迟50毫秒输出 if (analogRead(A1) < 100)  //X-Right return 2;      //回到动作2 } if (analogRead(A1) > 900)    //X-Left { delay(50);       //延迟50毫秒输出 if (analogRead(A1) > 900)  // return 3;      //回到动作3 } return 0; } void setup(void)     //初始化函数 { //初始化串口波特率 Wire.begin(); Serial.begin(115200); while(!Serial); pinMode(sensorPin_1, INPUT); //ESP8266初始化 Serial.print("setup begin\r\n"); Serial.print("FW Version:"); Serial.println(wifi.getVersion().c_str()); if (wifi.setOprToStationSoftAP()) { Serial.print("to station + softap ok\r\n"); } else { Serial.print("to station + softap err\r\n"); } if (wifi.joinAP(SSID, PASSWORD)) {      //加入无线网 Serial.print("Join AP success\r\n"); Serial.print("IP: "); Serial.println(wifi.getLocalIP().c_str()); } else { Serial.print("Join AP failure\r\n"); } if (wifi.disableMUX()) { Serial.print("single ok\r\n"); } else { Serial.print("single err\r\n"); } Serial.print("setup end\r\n"); //Serial.begin(9600);    //初始化串口通信，并将波特率设置为9600 //pinMode(A0, INPUT); //pinMode(A1, INPUT); //EEPROM--------------------- eeprom_READ(); //初始化mp3模块 audio_init(DEVICE_TF, MODE_loopOne, music_vol);   //初始化mp3模块 // u8g.setRot180();  // rotate screen, if required } void loop(void)     //循环函数 { if (sensor_time > millis())  sensor_time = millis(); if(millis() - sensor_time > INTERVAL_SENSOR)              //传感器采样时间间隔 { getSensorData();                                        //读串口中的传感器数据 sensor_time = millis(); } if (net_time1 > millis())  net_time1 = millis(); if (millis() - net_time1 > INTERVAL_NET)                  //发送数据时间间隔 { updateSensorData();                                     //将数据上传到服务器的函数 net_time1 = millis(); } int vol = uiStep(); //检测输入动作 Serial.print("0:"); Serial.print(analogRead(A0)); Serial.print("  1:"); Serial.println(analogRead(A1)); if (vol == 1) key = true;     //按一次开关,为动作1 else key = false;             //否则不做为动作1 if (!key && key_cache)    //按下松开后 { key_cache = key;    //缓存作判断用 music_status = !music_status; //播放或暂停 if (music_status == true) //播放 { Serial.println("play");   //串口输出 “play”（工作 //      audio_choose(1); audio_play();              //音频工作 } else  //暂停 { Serial.println("pause");   //串口输出 “pause”（暂停） audio_pause();              //音频暂停工作 } } else { key_cache = key;     //缓存作判断用 } if (vol == 0)                   //如果不对开关操作为动作0 { //    Serial.println("no"); music_vol_time_cache = millis(); music_vol_time = music_vol_time_cache; music_vol_sta = false;        //音频不工作 } else if (vol == 2)              //向右拨动开关为动作2 { music_vol_time = millis() - music_vol_time_cache; //    if(music_vol_time>200)  //拨动开关时间大于0.2秒 delay(500);                   //延迟0.5秒 if (uiStep() == 0 && !music_vol_sta) { Serial.println("next");    //歌曲输出下一个（向右波动1次开关） music_num++;  //歌曲序号加 if (music_num > music_num_MAX)  //限制歌曲序号范围，如果歌曲序号大于30 { music_num = 1; //歌曲序号返回1 } audio_choose(music_num); audio_play(); //delay(500);      //延迟0。5秒 music_status = true;       //音频状态为工作 eeprom_WRITE(); } else if (music_vol_time > 1500) //拨动开关时间大于1.5秒 { music_vol_sta = true;        //音量工作 music_vol++;                 //音量+1 if (music_vol > 30) music_vol = 30; //若音量大于30，则音量为30 audio_vol(music_vol); Serial.println("++");       //Serial.println函数输出“+1” delay(100);                  //延迟0.1秒 eeprom_WRITE(); } } else if (vol == 3)      //向左拨动开关为动作3 { music_vol_time = millis() - music_vol_time_cache; //    if(music_vol_time>200)       //延迟0.2秒 delay(500);//延迟0.5秒 if (uiStep() == 0 && !music_vol_sta) { Serial.println("perv"); music_num--;  //歌曲序号减1 if (music_num < 1)  //限制歌曲序号范围，如果歌曲序号小于1 { music_num = music_num_MAX;   //歌曲序号为最大（30） } audio_choose(music_num);       //音频选择歌曲序号 audio_play();                  //音频工作 //        delay(500);          //延迟0.5秒 music_status = true;           //音频工作 eeprom_WRITE(); } else if (music_vol_time > 1500)  //拨动开关时间大于1.5秒 { music_vol_sta = true;          //音频工作 music_vol--;                   //音量减1 if (music_vol < 30) music_vol = 25; //如果音量小于1，音量为1 audio_vol(music_vol); Serial.println("--");         //Serial.println函数输出“-1” delay(100);                    //延迟0.1秒 eeprom_WRITE(); } } if (millis() - timer_draw > init_draw) { u8g.firstPage(); do { draw(); } while ( u8g.nextPage() ); timer_draw = millis(); } } void getSensorData(){ sensor_tem = SHT2x.GetTemperature() ; sensor_hum = SHT2x.GetHumidity(); //获取光照 sensor_lux = analogRead(A0); delay(1000); dtostrf(sensor_tem, 2, 1, sensor_tem_c); dtostrf(sensor_hum, 2, 1, sensor_hum_c); dtostrf(sensor_lux, 3, 1, sensor_lux_c); } void updateSensorData() { if (wifi.createTCP(HOST_NAME, HOST_PORT)) { //建立TCP连接，如果失败，不能发送该数据 Serial.print("create tcp ok\r\n"); jsonToSend="{\"Temperature\":"; dtostrf(sensor_tem,1,2,buf); jsonToSend+="\""+String(buf)+"\""; jsonToSend+=",\"Humidity\":"; dtostrf(sensor_hum,1,2,buf); jsonToSend+="\""+String(buf)+"\""; jsonToSend+=",\"Light\":"; dtostrf(sensor_lux,1,2,buf); jsonToSend+="\""+String(buf)+"\""; jsonToSend+="}"; postString="POST /devices/"; postString+=DEVICEID; postString+="/datapoints?type=3 HTTP/1.1"; postString+="\r\n"; postString+="api-key: "; postString+=apiKey; postString+="\r\n"; postString+="Host:api.heclouds.com\r\n"; postString+="Connection:close\r\n"; postString+="Content-Length:"; postString+=jsonToSend.length(); postString+="\r\n"; postString+="\r\n"; postString+=jsonToSend; postString+="\r\n"; postString+="\r\n"; postString+="\r\n"; const char *postArray = postString.c_str();                 //将str转化为char数组 Serial.println(postArray); wifi.send((const uint8_t*)postArray, strlen(postArray));    //send发送命令，参数必须是这两种格式，尤其是(const uint8_t*) Serial.println("send success"); if (wifi.releaseTCP()) {                                 //释放TCP连接 Serial.print("release tcp ok\r\n"); } else { Serial.print("release tcp err\r\n"); } postArray = NULL;                                       //清空数组，等待下次传输数据 } else { Serial.print("create tcp err\r\n"); } } void eeprom_WRITE() { config_type config;     // 定义结构变量config，并定义config的内容 config.EEPROM_music_num = music_num; config.EEPROM_music_vol = music_vol; EEPROM_write(0, config);  // 变量config存储到EEPROM，地址0写入 } void eeprom_READ() { config_type config_readback; EEPROM_read(0, config_readback); music_num = config_readback.EEPROM_music_num; music_vol = config_readback.EEPROM_music_vol; } //主界面，可自由定义 void draw() { setFont_L; u8g.setPrintPos(4, 16); u8g.print("Music_sta:"); u8g.print(music_status ? "play" : "pause"); u8g.setPrintPos(4, 16 * 2); u8g.print("Music_vol:"); u8g.print(music_vol); u8g.print("/30"); u8g.setPrintPos(4, 16 * 3); u8g.print("Music_num:"); u8g.print(music_num); u8g.print("/"); u8g.print(music_num_MAX); u8g.setPrintPos(4, 16 * 4); u8g.print("....Microduino...."); //u8g.print(rtc.formatTime(RTCC_TIME_HMS)); }   *************************************************************************************** 

#include <IRremote.h> #include <Adafruit_NeoPixel.h> #include <Wire.h> #include "I2Cdev.h" #include "SHT2x.h"
#include "Rtc_Pcf8563.h" Rtc_Pcf8563 rtc; #include "Wire.h" #include "U8glib.h" #define setFont_L u8g.setFont(u8g_font_7x13) #define setFont_M u8g.setFont(u8g_font_fixed_v0r) #define setFont_S u8g.setFont(u8g_font_fixed_v0r) #define setFont_SS u8g.setFont(u8g_font_chikitar) U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);
#define init_draw 20  //主界面刷新时间 Adafruit_NeoPixel strip = Adafruit_NeoPixel(6, PIN, NEO_GRB + NEO_KHZ800); void setup() { Serial.begin(9600);//初始化串口通信，并设置波特率9600
  setRtcTime(16, 12, 9, 5, 12, 24, 00); timer = millis();
  Wire.begin(); strip.begin(); strip.show(); // Initialize all pixels to 'off' irrecv.enableIRIn(); // Start the receiver
} void read() {
Serial.println("time is 10:33");
  Serial.println("%"); delay(100); } void loop() { Serial.println("time is 10:33");
 Serial.println("%"); delay(100); } void draw() { setFont_L; u8g.setPrintPos(4, 16); u8g.print(rtc.formatDate(RTCC_DATE_US)); u8g.print("    "); switch (rtc.getWeekday()) { case 1: u8g.print("Mon"); break; case 2: u8g.print("Tue"); break; case 3: u8g.print("Wed"); break; case 4: u8g.print("Thu"); break; case 5: u8g.print("Fri"); break; case 6: u8g.print("Sat"); break; case 7: u8g.print("Sun"); break;
 u8g.setPrintPos(18, 49); u8g.print("10：56 "); } void setRtcTime (byte _year, byte _month, byte _day, byte _week, byte _hour, byte _minute, byte _sec) { //clear out all the registers rtc.initClock(); rtc.setDate(_day, _week, _month, 0, _year); rtc.setTime(_hour, _minute, _sec); }



/********************************************************************************/
